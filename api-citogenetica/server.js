// Carrega as vari√°veis de ambiente do arquivo .env no in√≠cio de tudo.
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const path = require('path');

// --- PONTO 1: IMPORTA√á√ÉO CENTRALIZADA ---
// Importamos o objeto 'db' que cont√©m a inst√¢ncia do sequelize e todos os modelos.
// A conex√£o com o banco de dados j√° √© testada dentro deste m√≥dulo.
const db = require('./src/models');

// Importamos o arquivo de rotas consolidado.
const allRoutes = require('./src/routes/routes');

const app = express();
const PORT = process.env.PORT || 3000; // Define uma porta padr√£o.

// --- MIDDLEWARES ---

// Habilita o CORS para todas as origens.
app.use(cors());

// Configura o parser para payloads JSON. Reduzimos o limite, pois n√£o trafegamos mais arquivos em Base64.
app.use(express.json({ limit: '1mb' }));

// Parser para dados de formul√°rio url-encoded.
app.use(express.urlencoded({ extended: true }));


// --- PONTO 2: SERVINDO ARQUIVOS EST√ÅTICOS (LAUDOS) ---
// Esta linha instrui o Express a servir os arquivos da pasta 'uploads'
// atrav√©s de uma rota virtual chamada '/files'.
// Exemplo de URL: http://localhost:3000/files/nome_do_laudo.pdf
app.use('/files', express.static(path.join(__dirname, 'uploads')));

// --- PONTO 3: INICIALIZA√á√ÉO DO BANCO DE DADOS ---
// Testa a conex√£o com o banco de dados e sincroniza os modelos.
// A conex√£o √© feita uma √∫nica vez aqui, no in√≠cio do servidor.
app.set('db', db);

// --- ROTAS DA API ---
// Centraliza todas as rotas da aplica√ß√£o sob o prefixo /api.
app.use('/api', allRoutes);


// --- INICIALIZA√á√ÉO DO SERVIDOR ---

const startServer = async () => {
  try {
    app.listen(PORT, '0.0.0.0', () => {
      console.log('-------------------------------------------------------');
      console.log(`üöÄ Servidor iniciado e rodando na porta ${PORT}`);
      console.log(`      Acess√≠vel localmente em: http://localhost:${PORT}`);
      console.log(`      Uploads de laudos servidos em: http://localhost:${PORT}/files`);
      console.log('-------------------------------------------------------');
    });

  } catch (error) {
    // Captura erros cr√≠ticos que podem ocorrer durante a configura√ß√£o inicial.
    console.error('‚ùå Erro fatal ao iniciar o servidor:', error);
    process.exit(1); // Encerra o processo em caso de erro cr√≠tico.
  }
};

// Inicia o servidor.
startServer();
